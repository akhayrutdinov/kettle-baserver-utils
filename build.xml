<project name="BA Server Utils" basedir="." default="dist"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the kettle plugin BA Server Utils.
  </description>

  <!-- import top level build properties -->
  <property file="build.properties" description="top level properties"/>
  <echo message="project.revision = ${project.revision}"/>

  <!-- import subfloor file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" id="subfloor"/>

  <!-- add additional properties -->
  <property name="project.jarfile" value="${ivy.artifact.id}-${project.revision}.jar"/>
  <property name="project.zipfile" value="${ivy.artifact.id}-${project.revision}.zip"/>
  <property name="stage.dir" value="${bin.dir}/stage" description="stage directory"/>
  <property name="samples.dir" value="${basedir}/samples" description="samples directory"/>
  <property name="lib.dir" value="${basedir}/lib" description="lib directory"/>

  <!--==========================================================================================
      target: stage
      prepare this project for distribution / installation
  ===========================================================================================-->
  <target name="stage" depends="clean,resolve,compile.compile" description="prepares files for distribution">

    <!-- create the stage folder tree -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${project.id}"/>

    <!-- jar things up, including properties files and icons, and copy to stage -->
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.properties"/>
    </copy>
    <jar jarfile="${stage.dir}/${project.id}/${project.jarfile}">
      <fileset dir="${classes.dir}"/>
      <fileset dir="${res.dir}" includes="**/*.png"/>
    </jar>

    <!-- copy libs to stage dir -->
    <copy todir="${stage.dir}/${project.id}/lib" overwrite="true">
      <fileset dir="${basedir}/dist">
        <include name="*.jar" />
      </fileset>
      <fileset dir="${basedir}/lib">
        <include name="libpensol*.jar" />
        <include name="pentaho-platform-core*.jar" />
        <include name="pentaho-platform-repository*.jar" />
      </fileset>
    </copy>

    <!-- copy samples to stage -->
    <copy todir="${stage.dir}/${project.id}/samples" overwrite="true">
      <fileset dir="${samples.dir}"/>
    </copy>

    <!-- copy readme to stage -->
    <copy todir="${stage.dir}/${project.id}" overwrite="true">
      <fileset file="README.md"/>
    </copy>

    <!-- create the version file -->
    <tstamp/>
    <property name="build.id" value="manual-${DSTAMP}"/>
    <echo file="${stage.dir}/${project.id}/version.xml"
          message="&lt;version branch='${project.stage}' buildId='${build.id}'>${project.version}&lt;/version>"/>

  </target>

  <!--==========================================================================================
      target: dist
      creates a distribution of this project in a zip ready for marketplace (overrides subfloor dist)
  ===========================================================================================-->
  <target name="dist" depends="stage" description="creates a distribution">

    <!-- create dist folder -->
    <mkdir dir="${dist.dir}"/>

    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${project.zipfile}" basedir="${stage.dir}"
         includes="**/*"
         excludes="**/Thumbs.db  **/.DS_Store"/>

    <!-- create market_entry.xml file -->
    <copy file="${basedir}/market_entry.xml" tofile="${dist.dir}/market_entry.xml" overwrite="true">
      <filterset>
        <filter token="project.stage" value="${project.stage}"/>
        <filter token="project.version" value="${project.version}"/>
        <filter token="project.revision" value="${project.revision}"/>
        <filter token="project.package" value="${project.zipfile}"/>
      </filterset>
    </copy>

  </target>

  <!--==========================================================================================
      target: uninstall
      uninstalls this project from local PDI
  ===========================================================================================-->
  <target name="uninstall" depends="" description="uninstalls from local PDI">

    <!-- check PDI path -->
    <available file="${kettle.dir}" type="dir" property="kettle.dir.exists"/>
    <fail unless="kettle.dir.exists"
          message="PDI installation not found in '${kettle.dir}'. Please specify the path to your PDI installation in 'build.properties'."/>
    <property name="steps.dir" value="${kettle.dir}/plugins/steps"/>

    <!-- check BA Server path -->
    <available file="${baserver.dir}" type="dir" property="baserver.dir.exists"/>
    <fail unless="baserver.dir.exists"
          message="BA Server not found in '${baserver.dir}'. Please specify the path to your BA Server installation in 'build.properties'."/>
    <property name="steps2.dir" value="${baserver.dir}/pentaho-solutions/system/kettle/plugins/steps"/>

    <!-- remove installation -->
    <delete dir="${steps.dir}/${project.id}"/>
    <delete dir="${steps2.dir}/${project.id}"/>

  </target>

  <!--==========================================================================================
      target: install
      installs this project into local PDI
  ===========================================================================================-->
  <target name="install" depends="uninstall,stage" description="installs into local PDI">

    <!-- put stage files in place -->
    <copy todir="${steps.dir}">
      <fileset dir="${stage.dir}" includes="**/*.*"/>
    </copy>
    <copy todir="${steps2.dir}">
      <fileset dir="${stage.dir}" includes="**/*.*"/>
    </copy>

    <echo message="Installed '${project.id}' in PDI. To test, please restart Spoon."/>

  </target>

</project>
